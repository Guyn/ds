// hexStringToRGB
// Convert a HEX string which is a string into a RGB color

@function hexStringToRGB($string) {
	$rgb: ();

	$s: to-lower-case($string);

	@if first-character($s) != "#" {
		@warn '#{$string} is not a hex color code.';
		@return $string;
	}

	// 3 digits
	@if str-length($string) == 4 {
		$rgb: (
			(parseInt(nth-character($s, 2) + nth-character($s, 2), 16)),
			(parseInt(nth-character($s, 3) + nth-character($s, 3), 16)),
			(parseInt(nth-character($s, 4) + nth-character($s, 4), 16))
		);
	}
	// 6 digits
	@else if str-length($string) == 7 {
		$rgb: (
			(parseInt(nth-character($s, 2) + nth-character($s, 3), 16)),
			(parseInt(nth-character($s, 4) + nth-character($s, 5), 16)),
			(parseInt(nth-character($s, 6) + nth-character($s, 7), 16))
		);
	}

	$red: nth($rgb, 1);
	$green: nth($rgb, 2);
	$blue: nth($rgb, 3);
	$color: rgb($red, $green, $blue);
	@return $color;
}

// color
// Get the color from the defined colors.

@function color($color, $alpha: 1) {
	$color-value: map-get($colors, str-replace($color, "_", ""));
	@return hexStringToRGB($color-value);
}

// setLightness
// Set the lightness of a Custom property or HEX Sass Variable

@function setLightness($color, $lightness: 50, $alpha: 1) {
	@if type-of($color) == "string" and nth-character($color, 1) == "#" {
		$color: hexStringToRGB($color);
	}
	@if $alpha > 1 {
		$alpha: $alpha / 100;
	}
	@if type-of($color) == "string" and str-slice($color, 1, 2) == "--" {
		@return hsla(var(#{$color}-h), var(#{$color}-s), $lightness * 1%, $alpha);
	}
	@return hsla(hue($color), saturation($color), $lightness, alpha($color));
}

// setOpacity
// Set the opacity of a Custom property or HEX Sass Variable

@function setOpacity($color, $alpha: 1) {
	@if $alpha > 1 {
		$alpha: $alpha / 100;
	}
	@if type-of($color) == "string" and str-slice($color, 1, 2) == "--" {
		@return hsla(var(#{$color}-h), var(#{$color}-s), var(#{$color}-l), $alpha);
	}
	@return hsla(hue($color), saturation($color), lightness($color), $alpha);
}
